"use strict";var TimedQueue=function(){function t(){this.queue=[],this.tHandle=null,this.done=!0,this.observers=[]}return t.prototype.addTask=function(t,e){if(!this.done)throw new Error("Job is under process");return this.queue.push({callback:t,time:e})},t.prototype.removeTask=function(t){if(!this.done)throw new Error("Job is under process");var e=this.queue.indexOf(t);if(-1==e)throw new Error("Job not found");this.queue.splice(e,1)},t.prototype.start=function(){var t=this;if(!this.done)throw new Error("Job already started");if(0==this.queue.length)throw new Error("Job Queue is empty");this.done=!1,this.tHandle=setTimeout(function(){t.next()},0)},t.prototype.next=function(){var t=this;if(0==this.queue.length)return this.done=!0,void this.finish();var e=this.queue.shift();e.callback.call(null),this.tHandle=setTimeout(function(){t.next()},e.time)},t.prototype.finish=function(){for(var t=0,e=this.observers;t<e.length;t++){e[t].call(null)}},t.prototype.isCompleted=function(){return this.done},t.prototype.stop=function(){if(!this.done)throw new Error("Queue is not started");clearTimeout(this.tHandle)},t.prototype.subscribe=function(t){this.observers.push(t)},t.prototype.reset=function(){clearTimeout(this.tHandle),this.tHandle=null,this.done=!0,this.queue.length>0&&this.queue.splice(0,this.queue.length)},t}();
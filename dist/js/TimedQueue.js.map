{"version":3,"sources":["../src/TimedQueue.ts"],"names":[],"mappings":"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","file":"TimedQueue.js","sourcesContent":["class TimedQueue {\r\n    private queue: Array<TimedJob> = [];\r\n    private tHandle: any = null;\r\n    private done: boolean = true;\r\n    private observers: Array<Function> = [];\r\n    constructor() {\r\n    }\r\n\r\n    addTask(callback: Function, time: number): number {\r\n        if (!this.done)\r\n            throw new Error('Job is under process');\r\n        return this.queue.push({\r\n            callback: callback,\r\n            time: time\r\n        });\r\n    }\r\n\r\n    removeTask(job: TimedJob) {\r\n        if (!this.done)\r\n            throw new Error('Job is under process');\r\n        let index = this.queue.indexOf(job);\r\n        if (index == -1)\r\n            throw new Error('Job not found');\r\n        this.queue.splice(index, 1);\r\n    }\r\n\r\n    start() {\r\n        if (!this.done)\r\n            throw new Error('Job already started');\r\n        if (this.queue.length == 0)\r\n            throw new Error('Job Queue is empty');\r\n        this.done = false;\r\n        this.tHandle = setTimeout(() => { this.next() }, 0);\r\n    }\r\n\r\n    private next() {\r\n        if (this.queue.length == 0) {\r\n            this.done = true;\r\n            this.finish();\r\n            return;\r\n        }\r\n        let job: TimedJob = this.queue.shift();\r\n        job.callback.call(null);\r\n        this.tHandle = setTimeout(() => { this.next() }, job.time);\r\n    }\r\n\r\n    private finish() {\r\n        for (let observer of this.observers)\r\n            observer.call(null);\r\n    }\r\n\r\n    isCompleted() {\r\n        return this.done;\r\n    }\r\n\r\n    stop() {\r\n        if (!this.done)\r\n            throw new Error('Queue is not started');\r\n        clearTimeout(this.tHandle);\r\n    }\r\n\r\n    subscribe(callback: Function) {\r\n        this.observers.push(callback);\r\n    }\r\n\r\n    reset() {\r\n        clearTimeout(this.tHandle);\r\n        this.tHandle = null;\r\n        this.done = true;\r\n        if (this.queue.length > 0)\r\n            this.queue.splice(0, this.queue.length);\r\n    }\r\n}"]}